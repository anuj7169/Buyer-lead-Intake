'use client';

import React, { useState } from 'react';
import { z } from 'zod';
import { leadSchema } from '../../../lib/validation';
import { useRouter } from 'next/navigation';

export default function NewLeadPage() {
  const [formData, setFormData] = useState({ name: '', email: '', phone: '', notes: '' });
  const [errors, setErrors] = useState<{ [key: string]: string }>({});
  const router = useRouter();

  const onChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }));
  };

  const onSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErrors({});
    try {
      leadSchema.parse(formData);

      const res = await fetch('/leads/api', {
        method: 'POST',
        body: JSON.stringify(formData),
        headers: { 'Content-Type': 'application/json' },
      });
      if (res.ok) {
        router.push('/leads');
      } else {
        const data = await res.json();
        setErrors({ form: data.error || 'Failed to submit' });
      }
    } catch (err) {
      if (err instanceof z.ZodError) {
        const fieldErrors: { [key: string]: string } = {};
        err.errors.forEach(e => {
          if (e.path.length > 0) {
            fieldErrors[e.path[0]] = e.message;
          }
        });
        setErrors(fieldErrors);
      }
    }
  };

  return (
    <div>
      <h1>New Lead</h1>
      <form onSubmit={onSubmit}>
        <div>
          <label>Name*</label><br />
          <input type="text" name="name" value={formData.name} onChange={onChange} />
          {errors.name && <p style={{ color: 'red' }}>{errors.name}</p>}
        </div>
        <div>
          <label>Email*</label><br />
          <input type="email" name="email" value={formData.email} onChange={onChange} />
          {errors.email && <p style={{ color: 'red' }}>{errors.email}</p>}
        </div>
        <div>
          <label>Phone</label><br />
          <input type="tel" name="phone" value={formData.phone} onChange={onChange} />
          {errors.phone && <p style={{ color: 'red' }}>{errors.phone}</p>}
        </div>
        <div>
          <label>Notes</label><br />
          <textarea name="notes" value={formData.notes} onChange={onChange} />
          {errors.notes && <p style={{ color: 'red' }}>{errors.notes}</p>}
        </div>
        {errors.form && <p style={{ color: 'red' }}>{errors.form}</p>}
        <button type="submit">Save Lead</button>
      </form>
    </div>
  );
}
